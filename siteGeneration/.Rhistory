##libraries
library(readxl)
library(pbapply)
library(stringi)
library(webshot)
install.packages("webshot")
library(webshot)
baseDir <- "~/Documents/Github/"
dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
source(paste0(dataDir, "siteGeneratingFunctions.R"))
#toolInventoryName <- "Inventory_2020-01-21_v2.xlsx"
toolInventoryName <- "Tool Inventory - 10.23.20.xlsx"
templatePageName <- "pageTemplate.md"
templateIndex <- "templateIndex.md"
searchCodePage <- "searchTemplate.html"
stcntyFile <- paste0(dataDir, "MARISAstateFIPS.csv")
##line break character
el <- "\n"
tab <- "  "
##read in the tool description document
toolInventoryFile <- list.files(dataDir, toolInventoryName, recursive=T, full.names=T)
toolInventoryFile
##read in the tool description document
toolInventoryFile <- list.files(dataDir, toolInventoryName, recursive=T, full.names=T)
toolInventoryFile
paste0("/",toolInventoryFile)
grep("~$",toolInventoryFile)
toolInventoryFile
grep("~",toolInventoryFile)
grep("~\$",toolInventoryFile)
grep("~/$",toolInventoryFile)
grep("~",toolInventoryFile, invert=TRUE)
toolInventoryFile <- toolInventoryFile[grep("~",toolInventoryFile, invert=TRUE)]
toolInventoryFile
##get number of sheets, to load all of them
sheetNames <- excel_sheets(toolInventoryFile)
sheetNames
##read in data
toolInventory <- lapply(sheetNames, read_excel, path=toolInventoryFile, col_names=F)
View(toolInventory)
stcntyTab <- read.csv(stcntyFile)
##inventory, cleaning headers to be useful
inventory <- toolInventory[[1]]
inventory
catNames <- as.character(inventory[1,])
catNames
baseNames <- as.character(inventory[2,])
baseNames
catNames[6]
baseNames[6:10]
paste(catNames[6], baseNames[6:10], sep="-")
catNames[11]
catNames[16]
baseNames[16]
baseNames[25]
baseNames[29]
catNames[30]
catNames[35]
catNames[37]
catNames[46]
baseNames[16]
catNames[51]
catNames[54]
baseNames[54]
baseNames[59]
baseNames[65]
baseNames[71]
baseNames[79]
baseNames[83]
catNames[93]
inventory <- toolInventory[[1]]
catNames <- as.character(inventory[1,]) # Top line header for sheet 1: Inventory
baseNames <- as.character(inventory[2,]) # Secondary header for sheet 1: Inventory
# Combine the top line and secondary headers to set as the column names
##for now, hard coded
baseNames[6:10] <- paste(catNames[6], baseNames[6:10], sep="-") # Description
baseNames[11:15] <- paste(catNames[11], baseNames[11:15], sep="-") # Geographic Scope
baseNames[16:24] <- paste(catNames[16], baseNames[16], as.character(inventory[3,][16:24]), sep="-") # Purpose - Tool Function
baseNames[25:28] <- paste(catNames[16], baseNames[25], as.character(inventory[3,][25:28]), sep="-") # Purpose - Future Projections
baseNames[29] <- paste(catNames[16], baseNames[29], sep="-") # Purpose - Description
baseNames[30:34] <- paste(catNames[30], baseNames[30:34], sep="-") # Tool type
baseNames[35:36] <- paste(catNames[35], baseNames[35:36], sep="-") # Tool Inputs
baseNames[37:39] <- paste(catNames[37], baseNames[37:39], sep="-") # Tool Outputs
baseNames[45] <- paste(catNames[37], baseNames[45], sep="-")# Tool Outputs
baseNames[46:50] <- paste(catNames[46], baseNames[46:50], sep="-") # Software Requirements
baseNames[51:53] <- paste(catNames[51], baseNames[51:53], sep="-") # Effort / Skill
baseNames[54:58] <- paste(catNames[54], baseNames[54], as.character(inventory[3,][54:58]), sep="-") # Topic Filters - Main Topics
baseNames[59:64] <- paste(catNames[54], baseNames[59], as.character(inventory[3,][59:64]), sep="-") # Topic Filters - Climate
baseNames[65:70] <- paste(catNames[54], baseNames[65], as.character(inventory[3,][65:70]), sep="-") # Topic Filters - Ecosystems
baseNames[71:78] <- paste(catNames[54], baseNames[71], as.character(inventory[3,][71:78]), sep="-") # Topic Filters - Agriculture / Built Environment
baseNames[79:82] <- paste(catNames[54], baseNames[79], as.character(inventory[3,][79:82]), sep="-") # Topic Filters - Society
baseNames[83:90] <- paste(catNames[54], baseNames[83], as.character(inventory[3,][83:90]), sep="-") # Topic Filters - Water / Flooding
baseNames[93:94] <- paste(catNames[93], baseNames[93:94], sep="-") # Contact Information
baseNames[95:99] <- paste(catNames[93], baseNames[95:99], sep="-") # Contact Information
baseNames
colnames(inventory) <- baseNames
inventory$`Tool ID`
which(inventory$`Tool ID`=="1")
nrow(inventory)
inventory <- inventory[which(inventory$`Tool ID`=="1"):nrow(inventory),]
inventory
inventory$`Group ID`
is.na(inventory$`Group ID`)
which(is.na(inventory$`Group ID`)==F)
invValsOnly <- inventory[which(is.na(inventory$`Group ID`)==F),] # Extract the only the ones with Group IDs - should be all the tools
invValsOnly$`Tool ID`
as.numeric(invValsOnly$`Tool ID`)
round(as.numeric(invValsOnly$`Tool ID`),1)
format(round(as.numeric(invValsOnly$`Tool ID`),1))
as.character(format(round(as.numeric(invValsOnly$`Tool ID`),1)),nsmall=1)
##needed with tool id with new file, may not be needed in future versions
# Format the Tool ID to have just 1 decimal point and add a space padding if its a single digit number
invValsOnly$`Tool ID` <- as.character(format(round(as.numeric(invValsOnly$`Tool ID`),1)),nsmall=1)
invValsOnly[,c(1:39, 45:99)]
#hhh <- invValsOnly[,c(1:39, 45:99)]
invValsOnly <- invValsOnly[,c(1:39, 45:99)]
invValsOnly$`Tool ID`
View(inventory)
colnames(inventory)
templatePageName
list.files(dataDir, templatePageName, recursive=T, full.names=T)
##read in the template files to be editted
findTempFile <- list.files(dataDir, templatePageName, recursive=T, full.names=T)
findTempFile
readLines(findTempFile)
paste(readLines(findTempFile), collapse="\n")
templatePage <- paste(readLines(findTempFile), collapse="\n")
templateIndex
findIndFile <- list.files(dataDir, templateIndex, recursive=T, full.names=T)
findIndFile
readLines(findIndFile)
templateIndexPg <- paste(readLines(findIndFile), collapse="\n")
searchCodePage
findSearchTempFile <- list.files(dataDir, searchCodePage, recursive=T, full.names=T)
readLines(findSearchTempFile)
templateSearchTemp <- paste(readLines(findSearchTempFile), collapse="\n")
##split by group id, seems to be coorolated with developers
toolIDs <- unique(invValsOnly$`Tool ID`)
invValsOnly$`Tool ID`
toolIDs
toolIDs
is.na(toolIDs)
toolIDs <- toolIDs[is.na(toolIDs)==F]
splitByToolID <- lapply(toolIDs, function(x){invValsOnly[which(invValsOnly$`Tool ID`==x & is.na(invValsOnly$`Tool ID`)==F),]})
splitByToolID
View(splitByToolID)
splitByToolID[[1]]
View(splitByToolID)
View(splitByToolID[[1]])
invValsOnly[1,]
el
templateIndexPg
toolsDir
templateIndexPg
templateIndex
templatePage
stcntyTab
toolRec <- splitByToolID[[2]]
tempPage <- templatePage
el <- "\n"
siteDir <- toolsDir
scTab <- stcntyTab
updateContent <- T
toolRec
toolRec$Developer
strsplit(toolRec$Developer, "; ")
##if there is more than one developer, split the developers into a vector
splitDevs <- strsplit(toolRec$Developer, "; ")[[1]]
splitDevs
toolRec$`Tool ID`
trimws(toolRec$`Tool ID`)
if(is.na(toolRec$Developer)==T){
toolRec$Developer <- "Unknown"
}
##if there is more than one developer, split the developers into a vector
splitDevs <- strsplit(toolRec$Developer, "; ")[[1]]
# Set the name of the markdown page as "page-tool<tool ID number>.md"
##the name of the tool page within the site
toolIDtxt <- paste0("page-tool", trimws(toolRec$`Tool ID`))
#writeTool <-
toolIDtxt
toolRec$`Tool Name`
gsub(el, " ", toolRec$`Tool Name`)
#writeTool <- paste0(siteDir, splitDevs[1], "/", toolIDtxt, ".md")  ##the file in which the tool information will be written to, assumes first developer is the most important
toolRec$`Tool Name` <- gsub(el, " ", toolRec$`Tool Name`) ##remove any carriage returns from the tool name
writeTool
tempPage
toolRec$`Tool Name`
format(Sys.time(), "%FT%T%z")
toolRec$`Purpose-Description`
toolRec$`Description-Strengths`
strsplit(toolRec$`Description-Strengths`, "; |;  ")
tags <- strsplit(toolRec$`Description-Strengths`, "; |;  ")[[1]]
tags
class(tags)
tags[1]
paste(paste0('\"', unique(tags), '\"')
, collapse=", ")
toolPage
## Replace "page-template" with the tool name as the page title
toolPage <- gsub("page-template", toolRec$`Tool Name`, tempPage)
toolPage
toolPage <- gsub("a page", toolRec$`Purpose-Description`, toolPage)
gsub('\"tags\"', paste(paste0('\"', unique(tags), '\"'), collapse=", "), toolPage)
toolRec$`Tool Name`
toolIDtxt
toolTags <- data.frame(toolName=toolRec$`Tool Name`, toolLink=toolIDtxt, tag=tags)
toolTags
searchTags
splitDevs
names(toolRec)
#
##Why tool is useful
toolPurposes <- toolRec[grep("Purpose-Tool Function-", names(toolRec))]
toolPurposes
toolPurposes[which(is.na(toolPurposes)==F)]
vector(mode="character")
##topic filters - both main and sub-filters
toolSubFilts <- vector(mode="character")
names(toolRec)
toolRec[grep("Topic Filters-Climate-", names(toolRec))]
# Extract all climate related topic filters
climFilters <- toolRec[grep("Topic Filters-Climate-", names(toolRec))]
climFilters <- climFilters[which(is.na(climFilters)==F)]
climFilters
length(climFilters)
##topic filters - both main and sub-filters
toolSubFilts <- vector(mode="character")
c(toolSubFilts, sapply(strsplit(names(climFilters), "Topic Filters-Climate-"), "[[", 2))
toolRec$`Geographic Scope-Scope`
is.na(toolRec$`Geographic Scope-Locality`)
toolRec$`Geographic Scope-Scope`=="Locality"
subTab <- scTab[scTab$state=="VA",]
subTab
whichCity <- grep(" City", subTab$cntyName)
subTab$cntyName[-whichCity] <- paste0(subTab$cntyName[-whichCity], " County")
toolGeo <- data.frame(toolName=toolRec$`Tool Name`, toolLink=toolIDtxt, toolState="Virginia", toolLoc=subTab$cntyName, coastal=toolRec$`Geographic Scope-Coastal`)
toolGeo
toolRec$`Geographic Scope-Coastal`
subTab <- scTab[scTab$state=="VA",]
whichCity <- grep(" City", subTab$cntyName)
subTab$cntyName[-whichCity] <- paste0(subTab$cntyName[-whichCity], " County")
subTab$cntyName
whichCity
subTab <- scTab[scTab$state=="VA",]
subTab$cntyName
subTab$cntyName[-whichCity]
strsplit(toolRec$`Tool ID`, "[.]"),"[[",1)
strsplit(toolRec$`Tool ID`, "[.]")
sapply(strsplit(toolRec$`Tool ID`, "[.]"),"[[",1)
toolRec$`Tool ID`
toolRec$`Geographic Scope-Coastal`
collectSts
collectSts <- strsplit(toolRec$`Geographic Scope-State`, "; ")[[1]]
collectSts
scTab[scTab$state %in% collectSts,]
subTab[subTab$coastal=="Y",]
#
collectSts[grep("VA", collectSts)] <- "Virginia"
collectSts
collectSts
# if it is coastal then grab coastal counties
locsNoState <- NA
if(is.na(toolRec$`Geographic Scope-Coastal`)==F & toolRec$`Geographic Scope-Coastal`=="x"){
subTab <- scTab[scTab$state %in% collectSts,]
subTab <- subTab[subTab$coastal=="Y",]
whichCity <- grep(" City", subTab$cntyName)
subTab$cntyName[-whichCity] <- paste0(subTab$cntyName[-whichCity], " County")
locsNoState <- subTab$cntyName
collectSts <- subTab$state
}
collectSts
collectSts <- strsplit(toolRec$`Geographic Scope-State`, "; ")[[1]]
subTab <- scTab[scTab$state %in% collectSts,]
subTab <- subTab[subTab$coastal=="Y",]
whichCity <- grep(" City", subTab$cntyName)
subTab$cntyName[-whichCity] <- paste0(subTab$cntyName[-whichCity], " County")
locsNoState <- subTab$cntyName
collectSts <- subTab$state
collectSts
#
collectSts[grep("VA", collectSts)] <- "Virginia"
collectSts
toolGeo <- data.frame(toolName=toolRec$`Tool Name`, toolLink=toolIDtxt, toolState=collectSts, toolLoc=locsNoState, coastal=toolRec$`Geographic Scope-Coastal`)
toolGeo
toolScope <- paste0("__**Geographic Coverage**__", el, "- ", paste(unique(collectSts), collapse="; "), el)
toolScope
file(writeTool)
writeTool
toolGeo
toolScope
##libraries
library(readxl)
library(pbapply)
library(stringi)
# install.packages("webshot")
library(webshot)
baseDir <- "~/Documents/Github/"
dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
source(paste0(dataDir, "siteGeneratingFunctions.R"))
#toolInventoryName <- "Inventory_2020-01-21_v2.xlsx"
toolInventoryName <- "Tool Inventory - 12.15.21 copy.xlsx"
templatePageName <- "pageTemplate.md"
templateIndex <- "templateIndex.md"
searchCodePage <- "searchTemplate.html"
stcntyFile <- paste0(dataDir, "MARISAstateFIPS.csv")
##line break character
el <- "\n"
tab <- "  "
##read in the tool description document
toolInventoryFile <- list.files(dataDir, toolInventoryName, recursive=T, full.names=T)
toolInventoryFile
toolInventoryFile <- toolInventoryFile[grep("~",toolInventoryFile, invert=TRUE)]
toolInventoryFile
##get number of sheets, to load all of them
sheetNames <- excel_sheets(toolInventoryFile)
sheetNames
##read in data
# Each list represents a seperate excel sheet
toolInventory <- lapply(sheetNames, read_excel, path=toolInventoryFile, col_names=F)
names(toolInventory)
sheetNames
names(toolInventory) <- sheetNames
##inventory, cleaning headers to be useful
inventory <- toolInventory$Inventory # toolInventory[[1]]
View(inventory)
catNames <- as.character(inventory[1,]) # Top line header (category names) for sheet 1: Inventory
baseNames <- as.character(inventory[2,]) # Secondary header (sub-category names) for sheet 1: Inventory
catNames
baseNames <- as.character(inventory[2,]) # Secondary header (sub-category names) for sheet 1: Inventory
baseNames
level3Names <- as.character(inventory[3,]) # Secondary header (sub-category names) for sheet 1: Inventory
level4Names <- as.character(inventory[4,]) # Secondary header (sub-category names) for sheet 1: Inventory
level3Names
level4Names
##read in data
# Each list represents a seperate excel sheet
toolInventory <- lapply(sheetNames, read_excel, path=toolInventoryFile, col_names=F, fillMergedCells = TRUE)
library(openxlsx)
toolInventory_merge <- lapply(sheetNames, read.xlsx, path=toolInventoryFile, col_names=F, fillMergedCells = TRUE)
toolInventoryFile
toolInventory_merge <- lapply(sheetNames, read.xlsx, xlsxFile=toolInventoryFile, col_names=F, fillMergedCells = TRUE)
toolInventory_merge <- lapply(sheetNames, read.xlsx, xlsxFile=toolInventoryFile, colNames=F, fillMergedCells = TRUE)
names(toolInventory_merge) <- sheetNames
inventory_merge <- toolInventory_merge$Inventory
View(inventory_merge)
##libraries
library(readxl)
library(pbapply)
library(stringi)
# install.packages("webshot")
library(webshot)
library(openxlsx)
##webshot::install_phantomjs()
#/Volumes/GoogleDrive/Shared drives/MARISA/Coastal Climate Extension Pilot/Tool Inventory/Tool Screenshots_resized_156_250/TOOLID_1.0_ScreenCapture-1.png
##find data file, assumed to be on computer
# baseDir <- "/Users/mdl5548/Documents/GitHub/"
# dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
# #siteDir <- paste0(dataDir, "docs/")
# siteDir <- paste0(baseDir, "climToolsReference/content/")
# toolsDir <- paste0(siteDir, "tools/")
# discovDir <- paste0(baseDir, "climToolsReference/public/data/")
# imageDir <- paste0(baseDir, "climToolsReference/public/images/")
# toolSearchDir <- paste0(baseDir, "climToolsReference/themes/soho/layouts/page/")
baseDir <- "~/Documents/Github/"
dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
source(paste0(dataDir, "siteGeneratingFunctions.R"))
#toolInventoryName <- "Inventory_2020-01-21_v2.xlsx"
toolInventoryName <- "Tool Inventory - 12.15.21 copy.xlsx"
templatePageName <- "pageTemplate.md"
templateIndex <- "templateIndex.md"
searchCodePage <- "searchTemplate.html"
stcntyFile <- paste0(dataDir, "MARISAstateFIPS.csv")
##line break character
el <- "\n"
tab <- "  "
##read in the tool description document
toolInventoryFile <- list.files(dataDir, toolInventoryName, recursive=T, full.names=T)
toolInventoryFile <- toolInventoryFile[grep("~",toolInventoryFile, invert=TRUE)]
#toolInventoryFile <- descFile[grep(paste0("/",toolInventoryFile), descFile)]
##get number of sheets, to load all of them
sheetNames <- excel_sheets(toolInventoryFile)
##read in data
# Each list represents a seperate excel sheet
# toolInventory <- lapply(sheetNames, read_excel, path=toolInventoryFile, col_names=F)
# Use read.xlsx to get the merged cells
toolInventory <- lapply(sheetNames, read.xlsx, xlsxFile=toolInventoryFile, colNames=F, fillMergedCells = TRUE)
names(toolInventory) <- sheetNames
stcntyTab <- read.csv(stcntyFile) # Read the fips csv file
##inventory, cleaning headers to be useful
inventory <- toolInventory$Inventory # toolInventory[[1]]
inventory <- toolInventory$Inventory
catNames <- as.character(inventory[1,]) # Top line header (category names) for sheet 1: Inventory
baseNames <- as.character(inventory[2,]) # Secondary header (sub-category names) for sheet 1: Inventory
level3Names <- as.character(inventory[3,]) # Secondary header (sub-category names) for sheet 1: Inventory
level4Names <- as.character(inventory[4,]) # Secondary header (sub-category names) for sheet 1: Inventory
catNames
##a script to automatically pull apart input data and present that data in a website
##libraries
library(readxl)
library(pbapply)
library(stringi)
# install.packages("webshot")
library(webshot)
library(openxlsx)
##webshot::install_phantomjs()
#/Volumes/GoogleDrive/Shared drives/MARISA/Coastal Climate Extension Pilot/Tool Inventory/Tool Screenshots_resized_156_250/TOOLID_1.0_ScreenCapture-1.png
##find data file, assumed to be on computer
# baseDir <- "/Users/mdl5548/Documents/GitHub/"
# dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
# #siteDir <- paste0(dataDir, "docs/")
# siteDir <- paste0(baseDir, "climToolsReference/content/")
# toolsDir <- paste0(siteDir, "tools/")
# discovDir <- paste0(baseDir, "climToolsReference/public/data/")
# imageDir <- paste0(baseDir, "climToolsReference/public/images/")
# toolSearchDir <- paste0(baseDir, "climToolsReference/themes/soho/layouts/page/")
baseDir <- "~/Documents/Github/"
dataDir <- paste0(baseDir, "climToolsReference/siteGeneration/")
source(paste0(dataDir, "siteGeneratingFunctions.R"))
#toolInventoryName <- "Inventory_2020-01-21_v2.xlsx"
toolInventoryName <- "Tool Inventory - 12.15.21 copy.xlsx"
templatePageName <- "pageTemplate.md"
templateIndex <- "templateIndex.md"
searchCodePage <- "searchTemplate.html"
stcntyFile <- paste0(dataDir, "MARISAstateFIPS.csv")
##line break character
el <- "\n"
tab <- "  "
##read in the tool description document
toolInventoryFile <- list.files(dataDir, toolInventoryName, recursive=T, full.names=T)
toolInventoryFile <- toolInventoryFile[grep("~",toolInventoryFile, invert=TRUE)]
#toolInventoryFile <- descFile[grep(paste0("/",toolInventoryFile), descFile)]
##get number of sheets, to load all of them
sheetNames <- excel_sheets(toolInventoryFile)
##read in data
# Each list represents a seperate excel sheet
# toolInventory <- lapply(sheetNames, read_excel, path=toolInventoryFile, col_names=F)
# Use read.xlsx to get the merged cells
toolInventory <- lapply(sheetNames, read.xlsx, xlsxFile=toolInventoryFile, colNames=F, fillMergedCells = TRUE)
names(toolInventory) <- sheetNames
stcntyTab <- read.csv(stcntyFile) # Read the fips csv file
##inventory, cleaning headers to be useful
inventory <- toolInventory$Inventory # toolInventory[[1]]
inventory <- toolInventory$Inventory
catNames <- as.character(inventory[1,]) # Top line header (category names) for sheet 1: Inventory
baseNames <- as.character(inventory[2,]) # Secondary header (sub-category names) for sheet 1: Inventory
level3Names <- as.character(inventory[3,]) # Secondary header (sub-category names) for sheet 1: Inventory
level4Names <- as.character(inventory[4,]) # Secondary header (sub-category names) for sheet 1: Inventory
catNames
baseNames
paste(catNames, baseNames, sep="-")
is.na(catNames)
catNames[is.na(catNames)] <- ""
catNames
paste(catNames, baseNames, sep="-")
catNames <- as.character(inventory[1,]) # Top line header (category names) for sheet 1: Inventory
headers = rep(NA, length(catNames))
for(i in 1:length(catNames)){
if(is.na(catNames[i])){
headers[i] = catNames[i]
} else {
headers[i] = paste(catNames[i], baseNames[i], sep="-")
}
}
headers = rep(NA, length(catNames))
for(i in 1:length(catNames)){
if(is.na(catNames[i])){
headers[i] = baseNames[i]
} else {
headers[i] = paste(catNames[i], baseNames[i], sep="-")
}
}
headers
